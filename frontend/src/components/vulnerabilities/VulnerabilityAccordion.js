// bootstrap
import Accordion from 'react-bootstrap/Accordion';
import Tab from "react-bootstrap/Tab";
import Tabs from "react-bootstrap/Tabs"
import Badge from 'react-bootstrap/Badge';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Container from 'react-bootstrap/Container';
import VulnerabilityDetails from './VulnerabilityDetails';
import { useRef, useState } from 'react';
import { Buffer } from 'buffer';

import SecurityAdvisory from "../../models/SecurityAdvisory";
import Spinner from 'react-bootstrap/esm/Spinner';

function VulnerabilityAccordion({ vulnerabilities, whitelist, dependencies, ipfs }) {
    const loadedAdvisories = useRef([{cid: "", advisory: {}}]);
    const [selectedVulnerabilities, setSelectedVulnerabilities] = useState([]);

    const [loading, setLoading] = useState(true);
    const startLoading = () => setLoading(true); 
    const stopLoading = () => setLoading(false);

    async function selectVulnerabilities(vulnerabilities) {
        let updatedVulnerabilities = [];
        for await (let vulnerability of vulnerabilities) {
            if (!loadedAdvisories.current.some(entry => entry.cid === vulnerability.cid)) {
                loadedAdvisories.current.push({
                    cid: vulnerability.cid, 
                    advisory: await loadIpfsContent(vulnerability.cid)
                });
            }
            vulnerability.advisory = loadedAdvisories.current.find(entry => entry.cid === vulnerability.cid).advisory;
            updatedVulnerabilities.push(vulnerability); 
        }
        setSelectedVulnerabilities([...updatedVulnerabilities]);
        stopLoading();
    }

    function mapAddressToVendorName(address) {
        let name = whitelist.map((e) => {
            if (e.address === address)
                return e.name;
            return "Unknown vendor"
        });
        return name;
    }

    async function loadIpfsContent(cid) {
        let content = [];
        for await (const chunk of await ipfs.cat(cid)) {
            content = [...content, ...chunk];
        }
        return new SecurityAdvisory(Buffer.from(content).toString('utf8'));
    }

    return (
        <Accordion>
            {vulnerabilities.map((vulnerability, index) =>
                <Accordion.Item key={index} eventKey={index}>
                    <Accordion.Header>
                        <Container>
                            <Row>
                                <Col xs lg="2"><Badge pill bg="dark">{vulnerability[0].advisory.severity}</Badge></Col>
                                <Col xs lg="2">{vulnerability[0].event.returnValues.advisoryIdentifier}</Col>
                                <Col xs lg="4">{mapAddressToVendorName(vulnerability[0].tx.to)}</Col>
                                <Col xs lg="3">{new Date(vulnerability[0].block.timestamp * 1000).toLocaleString('en-GB')}</Col>
                            </Row>
                        </Container>
                    </Accordion.Header>
                    <Accordion.Body onEnter={() => {startLoading(); selectVulnerabilities(vulnerability)}}>
                        {loading === false 
                            ?   <div><p>Use the tabs below to select a specific version of the advisory to get information from.</p>
                                    <Tabs>
                                        { selectedVulnerabilities.map((version, index) => 
                                            <Tab key={index} eventKey={"VulnerabilityDetails" + index} 
                                                title={"version " + index}>
                                                <br></br>
                                                <h2>{version.advisory.title}</h2>
                                                <hr></hr>
                                                <h3>{version.advisory.description}</h3>
                                                <br />
                                                {dependencies !== []
                                                    ? <VulnerabilityDetails
                                                        advisory={version.advisory} 
                                                        dependencies={dependencies}
                                                        vulnerabilityIds={version.event.returnValues.vulnerabilityIdentifiers.split(",")}/>
                                                    : <h5>Cannot show because of missing dependency information.</h5>
                                                }
                                            </Tab>
                                        )}
                                    </Tabs>
                                </div>
                            :   <Spinner animation="border" role="status"  style={{ width: "4rem", height: "4rem" }}>
                                    <span className="visually-hidden">Loading...</span>
                                </Spinner>
                        }
                    </Accordion.Body>
                </Accordion.Item>
            )}
        </Accordion>
    )
}
export default VulnerabilityAccordion;