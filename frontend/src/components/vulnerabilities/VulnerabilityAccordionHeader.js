import Accordion from 'react-bootstrap/Accordion';
import Badge from 'react-bootstrap/Badge';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Container from 'react-bootstrap/Container';

function VulnerabilityAccordionHeader({vulnerability, publicWhitelist, privateWhitelist}) {
    /**
     * Maps a vendor address to a vendor name from the whitelist.
     * @param {string} address of the vendor to get the name of.
     * @returns string name of the vendor.
     */
    function mapAddressToVendorName(address, whitelist) {
        if (whitelist === null) return "Unknown vendor";
        let name = whitelist.map((e) => {
            if (e.address === address)
                if (e.hasOwnProperty("name"))
                    return e.name;
                if (e.hasOwnProperty("vendorName"))
                    return e.vendorName;
                return e.address;
        });
        return name;
    }

    return (
        <Accordion.Header>
            {vulnerability[0].type !== "private"
            ?   <Container>
                    <Row>
                        <Col xs lg="2"><Badge pill bg="primary">PUBLIC</Badge></Col>
                        <Col xs lg="2">{vulnerability[0].event.returnValues.advisoryIdentifier}</Col>
                        <Col xs lg="4">{mapAddressToVendorName(vulnerability[0].tx.to, publicWhitelist)}</Col>
                        <Col xs lg="3">{new Date(vulnerability[0].block.timestamp * 1000).toLocaleString('en-GB')}</Col>
                    </Row>
                </Container>
            :   <Container>
                    <Row>
                        <Col xs lg="2"><Badge pill bg="danger">PRIVATE</Badge></Col>
                        <Col xs lg="2"></Col>
                        <Col xs lg="4">{mapAddressToVendorName(vulnerability[0].tx.to, privateWhitelist)}</Col>
                        <Col xs lg="3">{new Date(vulnerability[0].block.timestamp * 1000).toLocaleString('en-GB')}</Col>
                    </Row>
                </Container>
            }
        </Accordion.Header>
    )
}
export default VulnerabilityAccordionHeader;