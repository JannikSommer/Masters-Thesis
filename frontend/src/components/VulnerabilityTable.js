import Table from 'react-bootstrap/Table';
import Badge from 'react-bootstrap/Badge';

import Web3 from 'web3';
import * as IPFS from 'ipfs-core'
import { CONTACT_ABI, CONTACT_ADDRESS } from '../config.js';
import { useEffect, useState } from 'react';


function VulnerabilityTable() {
    const [announcements, setEvents] = useState([]);
    const [eventTxs, setEventTxs] = useState([]);

    const [advisories, setAdvisories] = useState([]);

    // Populates the data above with the data iterated in the table below.
    useEffect(() => {
        async function load() {
          // Set events
          let web3 = new Web3(Web3.givenProvider || 'http://localhost:7545');
          let contract = new web3.eth.Contract(CONTACT_ABI, CONTACT_ADDRESS); 

          var events = await contract.getPastEvents(
              "NewSecuriytAdvisory", { fromBlock: 0, toBlock: 'latest' }, 
              function(error, events) { 
                  if (error) throw error;
                  return events;
              });
          setEvents(events);

          // Set transactions
          var txs = [];
          for (const event of events) {
              var tx = await web3.eth.getTransaction(event.transactionHash);
              txs.push(tx);
          }
          setEventTxs(txs);
        }

        async function getFile() {
          const cid = "QmTWyMcoM2Bg6RnATFK7zWWEj4guSTTaqqprLx8XKQdadQ";
          const ipfs = await IPFS.create();
          var docs = [];
          var doc = await ipfs.cat(cid);
          for await (const chunk of ipfs.cat(cid)) {
            console.info(String.fromCharCode.apply(null, chunk));
            var str = String.fromCharCode.apply(null, chunk)
            var obj = JSON.parse(str); 
            console.log(obj.files);
          }
          setAdvisories(docs);
        }
        load();
        getFile();
    }, []);

    return (
      <>
        <h1>Your vulnerabilities</h1>
          <Table striped bordered hover>
          <thead>
            <tr>
              <th>Vulnerability ID</th>
              <th>Product ID</th>
              <th>Vendor</th>
              <th>IPFS CID</th>
              <th>CVSS</th>
            </tr>
          </thead>
          <tbody>
            {announcements.map((announcement, index) => 
              <tr>
              <td>{announcement.returnValues.vulnerabilityId}</td>
              <td>{announcement.returnValues.productId}</td>
              <td>vendor</td>
              <td>{announcement.returnValues.documentLocation}</td>
              <td className="text-center"><Badge pill bg="dark">9.6</Badge>{' '}</td>
            </tr>
            )}
          </tbody>
        </Table>
      </>
    );
}
export default VulnerabilityTable;