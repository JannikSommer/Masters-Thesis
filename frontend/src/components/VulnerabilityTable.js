import Table from 'react-bootstrap/Table';
import Badge from 'react-bootstrap/Badge';

import Web3 from 'web3';
import { CONTACT_ABI, CONTACT_ADDRESS } from '../config.js';
import { useEffect, useState } from 'react';


function VulnerabilityTable({ipfs}) {
    const [announcements, setEvents] = useState([]);
    const [eventTxs, setEventTxs] = useState([]);
    const [advisories, setAdvisories] = useState([]);

    async function loadEvents() {
      // Load events
      let web3 = new Web3(Web3.givenProvider || 'http://localhost:7545');
      let contract = new web3.eth.Contract(CONTACT_ABI, CONTACT_ADDRESS); 

      var events = await contract.getPastEvents(
          "NewSecuriytAdvisory", { fromBlock: 0, toBlock: 'latest' }, 
          function(error, events) { 
              if (error) throw error;
              return events;
          });
      // Load event transactions
      var txs = [];
      for (const event of events) {
          var tx = await web3.eth.getTransaction(event.transactionHash);
          txs.push(tx);
      }
      // Set values only after both has been loaded
      setEvents(events);
      setEventTxs(txs);
    }

    async function getFile(ipfs) {
      const cid = "QmTWyMcoM2Bg6RnATFK7zWWEj4guSTTaqqprLx8XKQdadQ";
      var docs = [];
      for await (const chunk of ipfs.cat(cid)) {
        var str = String.fromCharCode.apply(null, chunk)
        console.log(str);
      }
      setAdvisories(docs);
    }

    // Populates the data above with the data iterated in the table below.
    useEffect(() => {
        loadEvents();
        getFile(ipfs);
    }, [ipfs]);

    return (
      <>
        <h1>Your vulnerabilities</h1>
          <Table striped bordered hover>
          <thead>
            <tr>
              <th>Vulnerability ID</th>
              <th>Product ID</th>
              <th>Vendor</th>
              <th>IPFS CID</th>
              <th>CVSS</th>
            </tr>
          </thead>
          <tbody>
            {announcements.map((announcement, index) => 
              <tr>
              <td>{announcement.returnValues.vulnerabilityId}</td>
              <td>{announcement.returnValues.productId}</td>
              <td>{eventTxs[index].to}</td>
              <td>{announcement.returnValues.documentLocation}</td>
              <td className="text-center"><Badge pill bg="dark">9.6</Badge>{' '}</td>
            </tr>
            )}
          </tbody>
        </Table>
      </>
    );
}
export default VulnerabilityTable;